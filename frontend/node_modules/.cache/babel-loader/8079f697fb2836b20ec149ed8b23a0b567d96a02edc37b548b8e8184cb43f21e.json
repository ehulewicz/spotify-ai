{"ast":null,"code":"var _jsxFileName = \"/home/eahtr/projects/spotify-ai/frontend/src/Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CSS/Chatbox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbox = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      setInput(\"sent\");\n      handleSend();\n    }\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: 'user',\n      text: input\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      const response = await fetch('http://localhost:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const gptMessage = {\n          sender: 'gpt',\n          text: data.response\n        };\n        setMessages(prevMessages => [...prevMessages, gptMessage]);\n      } else {\n        console.error('Error:', data.error);\n      }\n    } catch (error) {\n      console.error('Network error:', error);\n    } finally {\n      setInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.sender === 'user' ? 'user-message' : 'gpt-message',\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        onKeyDown: handleKeyDown,\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbox, \"Xhz1M2btVGAzY17pd7+8a34J2bk=\");\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbox","_s","input","setInput","messages","setMessages","handleInputChange","e","target","value","handleKeyDown","key","handleSend","trim","userMessage","sender","text","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","data","json","ok","gptMessage","console","error","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/eahtr/projects/spotify-ai/frontend/src/Chatbox.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport './CSS/Chatbox.css';\n\nconst Chatbox = () => {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  }\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      setInput(\"sent\")\n      handleSend();\n    }\n  }\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n  \n    const userMessage = { sender: 'user', text: input };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n  \n    try {\n      const response = await fetch('http://localhost:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: input }),\n      });\n  \n      const data = await response.json();\n  \n      if (response.ok) {\n        const gptMessage = { sender: 'gpt', text: data.response };\n        setMessages((prevMessages) => [...prevMessages, gptMessage]);\n      } else {\n        console.error('Error:', data.error);\n      }\n    } catch (error) {\n      console.error('Network error:', error);\n    } finally {\n      setInput('');\n    }\n  };\n\n  return (\n    <div className=\"chatbox\">\n      <div className=\"messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={message.sender === 'user' ? 'user-message' : 'gpt-message'}>\n            {message.text}\n          </div>\n        ))}\n      </div>  \n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}