{"ast":null,"code":"var _jsxFileName = \"/home/eahtr/projects/spotify-ai/frontend/src/Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CSS/Chatbox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbox = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleSend();\n    }\n  };\n\n  //understand async and try block\n  const handleSend = async () => {\n    if (input.trim()) {\n      setMessages([...messages, {\n        text: input,\n        sender: 'user'\n      }]);\n      const userMessage = input;\n      setInput('');\n      try {\n        // Send the user's message to the Flask backend\n        const response = await fetch('http://127.0.0.1:5001/api/gpt', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            message: userMessage\n          })\n        });\n        const data = await response.json();\n\n        // Add GPT's response to the chat\n        if (data.reply) {\n          setMessages(prevMessages => [...prevMessages, {\n            text: data.reply,\n            sender: 'gpt'\n          }]);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            text: 'Error: Unable to get response from GPT',\n            sender: 'gpt'\n          }]);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        setMessages(prevMessages => [...prevMessages, {\n          text: 'Error: Unable to reach the server',\n          sender: 'gpt'\n        }]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.sender === 'user' ? 'user-message' : 'gpt-message',\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        onKeyDown: handleKeyDown,\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }, this);\n};\n_s(Chatbox, \"Xhz1M2btVGAzY17pd7+8a34J2bk=\");\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbox","_s","input","setInput","messages","setMessages","handleInputChange","e","target","value","handleKeyDown","key","handleSend","trim","text","sender","userMessage","response","fetch","method","headers","body","JSON","stringify","message","data","json","reply","prevMessages","error","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/eahtr/projects/spotify-ai/frontend/src/Chatbox.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport './CSS/Chatbox.css';\n\nconst Chatbox = () => {\nconst [input, setInput] = useState('');\nconst [messages, setMessages] = useState([]);\n\nconst handleInputChange = (e) => {\n  setInput(e.target.value);\n}\n\nconst handleKeyDown = (e) => {\n  if (e.key === 'Enter') {\n    handleSend();\n  }\n}\n\n//understand async and try block\nconst handleSend = async () => {\n  if (input.trim()) {\n    setMessages([...messages, { text: input, sender: 'user'}])\n    const userMessage = input;\n    setInput('');\n\n    try {\n      // Send the user's message to the Flask backend\n      const response = await fetch('http://127.0.0.1:5001/api/gpt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ message: userMessage })\n      });\n\n      const data = await response.json();\n\n      // Add GPT's response to the chat\n      if (data.reply) {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { text: data.reply, sender: 'gpt' }\n        ]);\n      } else {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { text: 'Error: Unable to get response from GPT', sender: 'gpt' }\n        ]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { text: 'Error: Unable to reach the server', sender: 'gpt' }\n      ]);\n    }\n  }\n}\n\nreturn (\n  <div className=\"chatbox\">\n    <div className=\"messages\">\n      {messages.map((message, index) => (\n        <div key={index} className={message.sender === 'user' ? 'user-message' : 'gpt-message'}>\n          {message.text}\n        </div>\n      ))}\n    </div>  \n    <div className=\"input-container\">\n      <input\n        type=\"text\"\n        value={input}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Type your message...\"\n      />\n      <button onClick={handleSend}>Send</button>\n    </div>\n  </div>\n);\n}\n\nexport default Chatbox;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,iBAAiB,GAAIC,CAAC,IAAK;IAC/BJ,QAAQ,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,aAAa,GAAIH,CAAC,IAAK;IAC3B,IAAIA,CAAC,CAACI,GAAG,KAAK,OAAO,EAAE;MACrBC,UAAU,CAAC,CAAC;IACd;EACF,CAAC;;EAED;EACA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIV,KAAK,CAACW,IAAI,CAAC,CAAC,EAAE;MAChBR,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEU,IAAI,EAAEZ,KAAK;QAAEa,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;MAC1D,MAAMC,WAAW,GAAGd,KAAK;MACzBC,QAAQ,CAAC,EAAE,CAAC;MAEZ,IAAI;QACF;QACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,OAAO,EAAER;UAAY,CAAC;QAC/C,CAAC,CAAC;QAEF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;QAElC;QACA,IAAID,IAAI,CAACE,KAAK,EAAE;UACdtB,WAAW,CAAEuB,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;YAAEd,IAAI,EAAEW,IAAI,CAACE,KAAK;YAAEZ,MAAM,EAAE;UAAM,CAAC,CACpC,CAAC;QACJ,CAAC,MAAM;UACLV,WAAW,CAAEuB,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;YAAEd,IAAI,EAAE,wCAAwC;YAAEC,MAAM,EAAE;UAAM,CAAC,CAClE,CAAC;QACJ;MACF,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BxB,WAAW,CAAEuB,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;UAAEd,IAAI,EAAE,mCAAmC;UAAEC,MAAM,EAAE;QAAM,CAAC,CAC7D,CAAC;MACJ;IACF;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKgC,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBjC,OAAA;MAAKgC,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtB5B,QAAQ,CAAC6B,GAAG,CAAC,CAACT,OAAO,EAAEU,KAAK,kBAC3BnC,OAAA;QAAiBgC,SAAS,EAAEP,OAAO,CAACT,MAAM,KAAK,MAAM,GAAG,cAAc,GAAG,aAAc;QAAAiB,QAAA,EACpFR,OAAO,CAACV;MAAI,GADLoB,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNvC,OAAA;MAAKgC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BjC,OAAA;QACEwC,IAAI,EAAC,MAAM;QACX9B,KAAK,EAAEP,KAAM;QACbsC,QAAQ,EAAElC,iBAAkB;QAC5BmC,SAAS,EAAE/B,aAAc;QACzBgC,WAAW,EAAC;MAAsB;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFvC,OAAA;QAAQ4C,OAAO,EAAE/B,UAAW;QAAAoB,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAER,CAAC;AAAArC,EAAA,CA5EKD,OAAO;AAAA4C,EAAA,GAAP5C,OAAO;AA8Eb,eAAeA,OAAO;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}